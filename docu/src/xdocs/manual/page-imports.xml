<?xml version="1.0"
      encoding="iso-8859-1" ?>

<!-- $Id$ -->

<sect1 id="imports">
<title>Imports</title>
<indexterm><primary>Imports</primary></indexterm>

<para>
Controls the handling of import declarations.
</para>
<sect2 id="imports-sorting">
<title>Sorting</title>
<indexterm><primary>Imports</primary><secondary>sorting</secondary></indexterm>

<para>
Controls the sorting of import statements. Sorting the import statements makes 
it simple to browse a long list of imports. 
</para>

<itemizedlist>
<listitem>
<para>
Sort imports
</para>

<para>
Enables or disables the sorting of import statements. Enabling this option 
will sort all imports lexicographically. Additionally, associated packages can 
be grouped together to reduce complexity by collapsing related 
information into a common unit. 
</para>

<para>
You can add/remove package fragments (e.g. javax, javax.swing or com.foo.sarah)
via the <guibutton>Add...</guibutton> and <guibutton>Remove</guibutton>
buttons. To specify the order in which related statements should appear, you 
may want to use the <guibutton>Up</guibutton> and <guibutton>Down</guibutton> buttons.
</para>
</listitem>

<listitem>
<para id="imports-grouping-depth">
Default grouping depth
</para>

<indexterm zone="imports-grouping-depth"><primary>Imports</primary><secondary>sorting</secondary><tertiary>grouping depth</tertiary></indexterm>
<indexterm zone="imports-grouping-depth"><primary>Grouping depth</primary></indexterm>

<para>
Lets you define the default grouping depth.
</para>

<para>
Grouping depth specifies the number of packages and subpackages that are to be 
taken into account in order to determine whether two import statements are to 
be grouped together. For certain packages you may want to specify a grouping 
depth that differs from the default. 
</para>

<para>
Statements are to be grouped together, if all relevant parts are equal. So via
the grouping depth you can effectively specify how many parts are relevant.
</para>

<para>
To disable grouping at all, set the grouping depth to &quot;<literal>0</literal>&quot;.
</para>

<example id="ex-imports-grouping-depth-one">
<title>Grouping depth java='1'</title>
<programlisting>
import <emphasis role="bold">java</emphasis>.awt.Color;
import <emphasis role="bold">java</emphasis>.awt.Component;
import <emphasis role="bold">java</emphasis>.awt.GridBagConstraints;
import <emphasis role="bold">java</emphasis>.awt.GridBagLayout;
import <emphasis role="bold">java</emphasis>.awt.event.ActionEvent;
import <emphasis role="bold">java</emphasis>.awt.event.ActionListener;
import <emphasis role="bold">java</emphasis>.util.ArrayList;
import <emphasis role="bold">java</emphasis>.util.List;
</programlisting>
</example>

<example id="ex-imports-grouping-depth-two">
<title>Grouping depth java='2'</title>
<programlisting>
import <emphasis role="bold">java.awt</emphasis>.Color;
import <emphasis role="bold">java.awt</emphasis>.Component;
import <emphasis role="bold">java.awt</emphasis>.GridBagConstraints;
import <emphasis role="bold">java.awt</emphasis>.GridBagLayout;
import <emphasis role="bold">java.awt</emphasis>.event.ActionEvent;
import <emphasis role="bold">java.awt</emphasis>.event.ActionListener;

import <emphasis role="bold">java.util</emphasis>.ArrayList;
import <emphasis role="bold">java.util</emphasis>.List;
</programlisting>
</example>

<example id="ex-imports-grouping-depth-three">
<title>Grouping depth java= '3'</title>
<programlisting>
import <emphasis role="bold">java.awt</emphasis>.Color;
import <emphasis role="bold">java.awt</emphasis>.Component;
import <emphasis role="bold">java.awt</emphasis>.GridBagConstraints;
import <emphasis role="bold">java.awt</emphasis>.GridBagLayout;

import <emphasis role="bold">java.awt.event</emphasis>.ActionEvent;
import <emphasis role="bold">java.awt.event</emphasis>.ActionListener;

import <emphasis role="bold">java.util</emphasis>.ArrayList;
import <emphasis role="bold">java.util</emphasis>.List;
</programlisting>
</example>
<para/>
</listitem>
</itemizedlist>
</sect2>

<sect2 id="import-optimization">
<title>Optimize</title>
<para>
Optimizes the import statements by either expanding or collapsing them. This 
is a nice feature that is currently only available with the Ant and
JBuilder Plug-in.
</para>
<indexterm zone="import-optimization"><primary>Imports</primary><secondary>optimization</secondary></indexterm>

<itemizedlist>
<listitem>
<para id="import-optimization-expand">
Expand on-demand imports
<indexterm zone="import-optimization-expand"><primary>Imports</primary><secondary>expand</secondary></indexterm>
</para>
<para>
If enabled, tries to expand all on-demand import statements.
</para>
<para id="imports-on-demand">
Expanding means to resolve all on-demand import statements (sometimes called 
wildcard imports) and replace them with single-type import statements (sometimes 
called explicit imports) of the types that are actually used in the source file.
</para>
<indexterm zone="imports-on-demand"><primary>Imports</primary><secondary>on-demand</secondary></indexterm>

<para>
So the following on-demand import statement may be expanded into two 
single-type import statements that reference the needed types for this package.
</para>

<example id="ex-imports-on-demand">
<title>On-demand import statement</title>
<programlisting>
import java.util.*;
</programlisting>
</example>

<example id="ex-import-single-type">
<title>Single-type import statements</title>
<programlisting>
import java.util.ArrayList;
import java.util.List;
</programlisting>
</example>
<para>
Using single-type imports is quite useful and an absolute requirement in the 
open source community as this code is usually really reviewed. Using 
single-type imports makes it easy for the code reader to quickly find 
out the package a particular type is in: You just search for the type name 
from the start of the source file.
</para>
</listitem>
</itemizedlist>

<itemizedlist>
<listitem>
<para id="import-optimization-collapse">
Collapse single-type imports
<indexterm zone="import-optimization-collapse"><primary>Imports</primary><secondary>single-type</secondary></indexterm>
<indexterm zone="import-optimization-collapse"><primary>Imports</primary><secondary>collapse</secondary></indexterm>
</para>

<para>
If enabled, tries to collapse all single-type statements.
</para>

<para>
Collapsing means to remove all single-type imports of a given package and 
replacing them with one on-demand import statement.
</para>
</listitem>
</itemizedlist>
</sect2>
</sect1>
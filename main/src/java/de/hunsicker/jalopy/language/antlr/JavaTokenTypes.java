// $ANTLR 2.7.4: "main/src/java/de/hunsicker/jalopy/language/antlr/java15.g" -> "InternalJavaLexer.java"$

package de.hunsicker.jalopy.language.antlr;

import de.hunsicker.jalopy.language.JavaNode;
import de.hunsicker.jalopy.language.JavaNodeHelper;

public interface JavaTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int JAVADOC_COMMENT = 6;
	int LCURLY = 7;
	int RCURLY = 8;
	int BLOCK = 9;
	int MODIFIERS = 10;
	int OBJBLOCK = 11;
	int SLIST = 12;
	int CTOR_DEF = 13;
	int METHOD_DEF = 14;
	int VARIABLE_DEF = 15;
	int INSTANCE_INIT = 16;
	int STATIC_INIT = 17;
	int TYPE = 18;
	int CLASS_DEF = 19;
	int INTERFACE_DEF = 20;
	int PACKAGE_DEF = 21;
	int ARRAY_DECLARATOR = 22;
	int EXTENDS_CLAUSE = 23;
	int IMPLEMENTS_CLAUSE = 24;
	int PARAMETERS = 25;
	int PARAMETER_DEF = 26;
	int LABELED_STAT = 27;
	int TYPECAST = 28;
	int INDEX_OP = 29;
	int POST_INC = 30;
	int POST_DEC = 31;
	int METHOD_CALL = 32;
	int EXPR = 33;
	int ARRAY_INIT = 34;
	int IMPORT = 35;
	int UNARY_MINUS = 36;
	int UNARY_PLUS = 37;
	int CASE_GROUP = 38;
	int ELIST = 39;
	int FOR_INIT = 40;
	int FOR_CONDITION = 41;
	int FOR_ITERATOR = 42;
	int EMPTY_STAT = 43;
	int FINAL = 44;
	int ABSTRACT = 45;
	int STRICTFP = 46;
	int SUPER_CTOR_CALL = 47;
	int CTOR_CALL = 48;
	int VARIABLE_PARAMETER_DEF = 49;
	int STATIC_IMPORT = 50;
	int ENUM_DEF = 51;
	int ENUM_CONSTANT_DEF = 52;
	int FOR_EACH_CLAUSE = 53;
	int ANNOTATION_DEF = 54;
	int ANNOTATIONS = 55;
	int ANNOTATION = 56;
	int ANNOTATION_MEMBER_VALUE_PAIR = 57;
	int ANNOTATION_FIELD_DEF = 58;
	int ANNOTATION_ARRAY_INIT = 59;
	int TYPE_ARGUMENTS = 60;
	int TYPE_ARGUMENT = 61;
	int TYPE_PARAMETERS = 62;
	int TYPE_PARAMETER = 63;
	int WILDCARD_TYPE = 64;
	int TYPE_UPPER_BOUNDS = 65;
	int TYPE_LOWER_BOUNDS = 66;
	int ROOT = 67;
	int CASESLIST = 68;
	int SEPARATOR_COMMENT = 69;
	int BOF = 70;
	int SYNBLOCK = 71;
	int SPECIAL_COMMENT = 72;
	int LITERAL_package = 73;
	int SEMI = 74;
	int LITERAL_import = 75;
	int LITERAL_static = 76;
	int LBRACK = 77;
	int RBRACK = 78;
	int IDENT = 79;
	int DOT = 80;
	int QUESTION = 81;
	int LITERAL_extends = 82;
	int LITERAL_super = 83;
	int LT = 84;
	int COMMA = 85;
	int GT = 86;
	int SR = 87;
	int BSR = 88;
	int LITERAL_void = 89;
	int LITERAL_boolean = 90;
	int LITERAL_byte = 91;
	int LITERAL_char = 92;
	int LITERAL_short = 93;
	int LITERAL_int = 94;
	int LITERAL_float = 95;
	int LITERAL_long = 96;
	int LITERAL_double = 97;
	int STAR = 98;
	int LITERAL_private = 99;
	int LITERAL_public = 100;
	int LITERAL_protected = 101;
	int LITERAL_transient = 102;
	int LITERAL_native = 103;
	int LITERAL_threadsafe = 104;
	int LITERAL_synchronized = 105;
	int LITERAL_volatile = 106;
	int AT = 107;
	int LPAREN = 108;
	int RPAREN = 109;
	int ASSIGN = 110;
	int LITERAL_class = 111;
	int LITERAL_interface = 112;
	int LITERAL_enum = 113;
	int BAND = 114;
	int LITERAL_default = 115;
	int LITERAL_implements = 116;
	int LITERAL_this = 117;
	int LITERAL_throws = 118;
	int TRIPLE_DOT = 119;
	int COLON = 120;
	int LITERAL_if = 121;
	int LITERAL_else = 122;
	int LITERAL_while = 123;
	int LITERAL_do = 124;
	int LITERAL_break = 125;
	int LITERAL_continue = 126;
	int LITERAL_return = 127;
	int LITERAL_switch = 128;
	int LITERAL_throw = 129;
	int LITERAL_assert = 130;
	int LITERAL_for = 131;
	int LITERAL_case = 132;
	int LITERAL_try = 133;
	int LITERAL_finally = 134;
	int LITERAL_catch = 135;
	int PLUS_ASSIGN = 136;
	int MINUS_ASSIGN = 137;
	int STAR_ASSIGN = 138;
	int DIV_ASSIGN = 139;
	int MOD_ASSIGN = 140;
	int SR_ASSIGN = 141;
	int BSR_ASSIGN = 142;
	int SL_ASSIGN = 143;
	int BAND_ASSIGN = 144;
	int BXOR_ASSIGN = 145;
	int BOR_ASSIGN = 146;
	int LOR = 147;
	int LAND = 148;
	int BOR = 149;
	int BXOR = 150;
	int NOT_EQUAL = 151;
	int EQUAL = 152;
	int LE = 153;
	int GE = 154;
	int LITERAL_instanceof = 155;
	int SL = 156;
	int PLUS = 157;
	int MINUS = 158;
	int DIV = 159;
	int MOD = 160;
	int INC = 161;
	int DEC = 162;
	int BNOT = 163;
	int LNOT = 164;
	int LITERAL_true = 165;
	int LITERAL_false = 166;
	int LITERAL_null = 167;
	int LITERAL_new = 168;
	int NUM_INT = 169;
	int CHAR_LITERAL = 170;
	int STRING_LITERAL = 171;
	int NUM_FLOAT = 172;
	int NUM_LONG = 173;
	int NUM_DOUBLE = 174;
	int WS = 175;
	int SL_COMMENT = 176;
	int COMMENT = 177;
	int ML_COMMENT = 178;
	int ESC = 179;
	int HEX_DIGIT = 180;
	int VOCAB = 181;
	int EXPONENT = 182;
	int FLOAT_SUFFIX = 183;
}

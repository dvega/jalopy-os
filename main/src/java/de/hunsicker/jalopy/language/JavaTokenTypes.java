// $ANTLR 2.7.2a2 (20020112-1): "src/java/de/hunsicker/jalopy/language/java.g" -> "JavaLexer.java"$

package de.hunsicker.jalopy.language;

public interface JavaTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int JAVADOC_COMMENT = 6;
	int LCURLY = 7;
	int RCURLY = 8;
	int MODIFIERS = 9;
	int OBJBLOCK = 10;
	int SLIST = 11;
	int CTOR_DEF = 12;
	int METHOD_DEF = 13;
	int VARIABLE_DEF = 14;
	int INSTANCE_INIT = 15;
	int STATIC_INIT = 16;
	int TYPE = 17;
	int CLASS_DEF = 18;
	int INTERFACE_DEF = 19;
	int PACKAGE_DEF = 20;
	int ARRAY_DECLARATOR = 21;
	int EXTENDS_CLAUSE = 22;
	int IMPLEMENTS_CLAUSE = 23;
	int PARAMETERS = 24;
	int PARAMETER_DEF = 25;
	int LABELED_STAT = 26;
	int TYPECAST = 27;
	int INDEX_OP = 28;
	int POST_INC = 29;
	int POST_DEC = 30;
	int METHOD_CALL = 31;
	int EXPR = 32;
	int ARRAY_INIT = 33;
	int IMPORT = 34;
	int UNARY_MINUS = 35;
	int UNARY_PLUS = 36;
	int CASE_GROUP = 37;
	int ELIST = 38;
	int FOR_INIT = 39;
	int FOR_CONDITION = 40;
	int FOR_ITERATOR = 41;
	int EMPTY_STAT = 42;
	int FINAL = 43;
	int ABSTRACT = 44;
	int STRICTFP = 45;
	int SUPER_CTOR_CALL = 46;
	int CTOR_CALL = 47;
	int BOF = 48;
	int ROOT = 49;
	int CASESLIST = 50;
	int BLOCK_STATEMENT = 51;
	int SEPARATOR_COMMENT = 52;
	int SYNBLOCK = 53;
	int LITERAL_package = 54;
	int SEMI = 55;
	int LITERAL_import = 56;
	int LBRACK = 57;
	int RBRACK = 58;
	int LITERAL_void = 59;
	int LITERAL_boolean = 60;
	int LITERAL_byte = 61;
	int LITERAL_char = 62;
	int LITERAL_short = 63;
	int LITERAL_int = 64;
	int LITERAL_float = 65;
	int LITERAL_long = 66;
	int LITERAL_double = 67;
	int IDENT = 68;
	int DOT = 69;
	int STAR = 70;
	int LITERAL_private = 71;
	int LITERAL_public = 72;
	int LITERAL_protected = 73;
	int LITERAL_static = 74;
	int LITERAL_transient = 75;
	int LITERAL_native = 76;
	int LITERAL_synchronized = 77;
	int LITERAL_volatile = 78;
	int LITERAL_class = 79;
	int LITERAL_extends = 80;
	int LITERAL_interface = 81;
	int COMMA = 82;
	int LITERAL_implements = 83;
	int LPAREN = 84;
	int RPAREN = 85;
	int LITERAL_this = 86;
	int LITERAL_super = 87;
	int STR_supper = 88;
	int ASSIGN = 89;
	int LITERAL_throws = 90;
	int COLON = 91;
	int LITERAL_if = 92;
	int LITERAL_else = 93;
	int LITERAL_for = 94;
	int LITERAL_while = 95;
	int LITERAL_do = 96;
	int LITERAL_break = 97;
	int LITERAL_assert = 98;
	int LITERAL_continue = 99;
	int LITERAL_return = 100;
	int LITERAL_switch = 101;
	int LITERAL_throw = 102;
	int LITERAL_case = 103;
	int LITERAL_default = 104;
	int LITERAL_try = 105;
	int LITERAL_catch = 106;
	int LITERAL_finally = 107;
	int PLUS_ASSIGN = 108;
	int MINUS_ASSIGN = 109;
	int STAR_ASSIGN = 110;
	int DIV_ASSIGN = 111;
	int MOD_ASSIGN = 112;
	int SR_ASSIGN = 113;
	int BSR_ASSIGN = 114;
	int SL_ASSIGN = 115;
	int BAND_ASSIGN = 116;
	int BXOR_ASSIGN = 117;
	int BOR_ASSIGN = 118;
	int QUESTION = 119;
	int LOR = 120;
	int LAND = 121;
	int BOR = 122;
	int BXOR = 123;
	int BAND = 124;
	int NOT_EQUAL = 125;
	int EQUAL = 126;
	int LT = 127;
	int GT = 128;
	int LE = 129;
	int GE = 130;
	int LITERAL_instanceof = 131;
	int SL = 132;
	int SR = 133;
	int BSR = 134;
	int PLUS = 135;
	int MINUS = 136;
	int DIV = 137;
	int MOD = 138;
	int INC = 139;
	int DEC = 140;
	int BNOT = 141;
	int LNOT = 142;
	int LITERAL_true = 143;
	int LITERAL_false = 144;
	int LITERAL_null = 145;
	int LITERAL_new = 146;
	int NUM_INT = 147;
	int CHAR_LITERAL = 148;
	int STRING_LITERAL = 149;
	int NUM_FLOAT = 150;
	int NUM_LONG = 151;
	int NUM_DOUBLE = 152;
	int WS = 153;
	int SPECIAL_COMMENT = 154;
	int SL_COMMENT = 155;
	int COMMENT = 156;
	int ML_COMMENT = 157;
	int ESC = 158;
	int HEX_DIGIT = 159;
	int VOCAB = 160;
	int EXPONENT = 161;
	int FLOAT_SUFFIX = 162;
}
